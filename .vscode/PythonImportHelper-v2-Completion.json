[
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain.chat_models",
        "description": "langchain.chat_models",
        "isExtraImport": true,
        "detail": "langchain.chat_models",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain.chat_models",
        "description": "langchain.chat_models",
        "isExtraImport": true,
        "detail": "langchain.chat_models",
        "documentation": {}
    },
    {
        "label": "HumanMessage",
        "importPath": "langchain.schema",
        "description": "langchain.schema",
        "isExtraImport": true,
        "detail": "langchain.schema",
        "documentation": {}
    },
    {
        "label": "HumanMessage",
        "importPath": "langchain.schema",
        "description": "langchain.schema",
        "isExtraImport": true,
        "detail": "langchain.schema",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "load_quiz_data",
        "kind": 2,
        "importPath": "fp-1-new",
        "description": "fp-1-new",
        "peekOfCode": "def load_quiz_data():\n    with open('assets/data.json', 'r') as f:\n        return json.load(f)\n# UI\nst.title(\"üìç Quiz Ibu Kota Provinsi\")\nif \"questions\" not in st.session_state:\n    st.session_state.questions = []\n    st.session_state.current_answers = []\n    st.session_state.user_name = \"\"\nst.session_state.user_name = st.text_input(\"Masukkan nama kamu:\")",
        "detail": "fp-1-new",
        "documentation": {}
    },
    {
        "label": "GROQ_API",
        "kind": 5,
        "importPath": "fp-1-new",
        "description": "fp-1-new",
        "peekOfCode": "GROQ_API = os.getenv(\"GROQ_API\")\nGROQ_URL = os.getenv(\"GROQ_URL\")\n# Konfigurasi LLM\nllm = ChatOpenAI(\n    model=\"llama3-8b-8192\",\n    openai_api_key=GROQ_API,\n    base_url=GROQ_URL,\n    temperature=0,\n)\n# Fungsi untuk memuat data dari file JSON",
        "detail": "fp-1-new",
        "documentation": {}
    },
    {
        "label": "GROQ_URL",
        "kind": 5,
        "importPath": "fp-1-new",
        "description": "fp-1-new",
        "peekOfCode": "GROQ_URL = os.getenv(\"GROQ_URL\")\n# Konfigurasi LLM\nllm = ChatOpenAI(\n    model=\"llama3-8b-8192\",\n    openai_api_key=GROQ_API,\n    base_url=GROQ_URL,\n    temperature=0,\n)\n# Fungsi untuk memuat data dari file JSON\ndef load_quiz_data():",
        "detail": "fp-1-new",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "fp-1-new",
        "description": "fp-1-new",
        "peekOfCode": "llm = ChatOpenAI(\n    model=\"llama3-8b-8192\",\n    openai_api_key=GROQ_API,\n    base_url=GROQ_URL,\n    temperature=0,\n)\n# Fungsi untuk memuat data dari file JSON\ndef load_quiz_data():\n    with open('assets/data.json', 'r') as f:\n        return json.load(f)",
        "detail": "fp-1-new",
        "documentation": {}
    },
    {
        "label": "st.session_state.user_name",
        "kind": 5,
        "importPath": "fp-1-new",
        "description": "fp-1-new",
        "peekOfCode": "st.session_state.user_name = st.text_input(\"Masukkan nama kamu:\")\nnum_questions = st.number_input(\"Jumlah soal:\", min_value=1, max_value=10, step=1)\n# Menambahkan button untuk mulai kuis\nif st.button(\"Mulai Kuis\"):\n    if not st.session_state.user_name:\n        st.warning(\"Silakan isi nama kamu dulu.\")\n    else:\n        with st.spinner(\"Mengambil pertanyaan...\"):\n            # Memuat data kuis dari file JSON\n            quiz_data = load_quiz_data()",
        "detail": "fp-1-new",
        "documentation": {}
    },
    {
        "label": "num_questions",
        "kind": 5,
        "importPath": "fp-1-new",
        "description": "fp-1-new",
        "peekOfCode": "num_questions = st.number_input(\"Jumlah soal:\", min_value=1, max_value=10, step=1)\n# Menambahkan button untuk mulai kuis\nif st.button(\"Mulai Kuis\"):\n    if not st.session_state.user_name:\n        st.warning(\"Silakan isi nama kamu dulu.\")\n    else:\n        with st.spinner(\"Mengambil pertanyaan...\"):\n            # Memuat data kuis dari file JSON\n            quiz_data = load_quiz_data()\n            # Menyimpan pertanyaan acak ke dalam session state",
        "detail": "fp-1-new",
        "documentation": {}
    },
    {
        "label": "extract_json",
        "kind": 2,
        "importPath": "fp-1",
        "description": "fp-1",
        "peekOfCode": "def extract_json(text):\n    match = re.search(r\"\\[\\s*{.*?}\\s*\\]\", text)\n    st.markdown(f\"**JSON yang diekstrak:** \\n\\n {text}\\n\\n{match}\")\n    if match:\n        try:\n            return json.loads(match)\n        except json.JSONDecodeError:\n            print(\"Gagal parse JSON.\")\n            return []\n    return []",
        "detail": "fp-1",
        "documentation": {}
    },
    {
        "label": "generate_questions",
        "kind": 2,
        "importPath": "fp-1",
        "description": "fp-1",
        "peekOfCode": "def generate_questions(n: int):\n    prompt = f\"\"\"\nBuatkan {n} pertanyaan kuis pilihan ganda tentang ibu kota provinsi di Indonesia.\n- Pertanyaan harus dalam bahasa Indonesia.\n- Setiap pertanyaan memiliki 4 pilihan jawaban (A, B, C, D).\n- Jawaban yang benar harus ditempatkan secara acak dalam daftar pilihan.\n- Jangan selalu tampilkan provinsi Papua.\n- Tampilkan output hanya dalam format JSON seperti berikut, tanpa tambahan penjelasan apa pun:\n[\n  {{",
        "detail": "fp-1",
        "documentation": {}
    },
    {
        "label": "GROQ_API",
        "kind": 5,
        "importPath": "fp-1",
        "description": "fp-1",
        "peekOfCode": "GROQ_API = os.getenv(\"GROQ_API\")\nGROQ_URL = os.getenv(\"GROQ_URL\")\n# Konfigurasi LLM\nllm = ChatOpenAI(\n    model=\"llama3-8b-8192\",\n    openai_api_key=GROQ_API,\n    base_url=GROQ_URL,\n    temperature=0,\n)\nimport re",
        "detail": "fp-1",
        "documentation": {}
    },
    {
        "label": "GROQ_URL",
        "kind": 5,
        "importPath": "fp-1",
        "description": "fp-1",
        "peekOfCode": "GROQ_URL = os.getenv(\"GROQ_URL\")\n# Konfigurasi LLM\nllm = ChatOpenAI(\n    model=\"llama3-8b-8192\",\n    openai_api_key=GROQ_API,\n    base_url=GROQ_URL,\n    temperature=0,\n)\nimport re\nimport json",
        "detail": "fp-1",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "fp-1",
        "description": "fp-1",
        "peekOfCode": "llm = ChatOpenAI(\n    model=\"llama3-8b-8192\",\n    openai_api_key=GROQ_API,\n    base_url=GROQ_URL,\n    temperature=0,\n)\nimport re\nimport json\n# Fungsi untuk ekstrak JSON dari response\ndef extract_json(text):",
        "detail": "fp-1",
        "documentation": {}
    },
    {
        "label": "st.session_state.user_name",
        "kind": 5,
        "importPath": "fp-1",
        "description": "fp-1",
        "peekOfCode": "st.session_state.user_name = st.text_input(\"Masukkan nama kamu:\")\nnum_questions = st.number_input(\"Jumlah soal:\", min_value=1, max_value=10, step=1)\nif st.button(\"Mulai Kuis\"):\n    if not st.session_state.user_name:\n        st.warning(\"Silakan isi nama kamu dulu.\")\n    else:\n        with st.spinner(\"Mengambil pertanyaan...\"):\n            st.session_state.questions = generate_questions(int(num_questions))\n            for q in st.session_state.questions:\n                random.shuffle(q[\"options\"])",
        "detail": "fp-1",
        "documentation": {}
    },
    {
        "label": "num_questions",
        "kind": 5,
        "importPath": "fp-1",
        "description": "fp-1",
        "peekOfCode": "num_questions = st.number_input(\"Jumlah soal:\", min_value=1, max_value=10, step=1)\nif st.button(\"Mulai Kuis\"):\n    if not st.session_state.user_name:\n        st.warning(\"Silakan isi nama kamu dulu.\")\n    else:\n        with st.spinner(\"Mengambil pertanyaan...\"):\n            st.session_state.questions = generate_questions(int(num_questions))\n            for q in st.session_state.questions:\n                random.shuffle(q[\"options\"])\n            st.session_state.current_answers = []",
        "detail": "fp-1",
        "documentation": {}
    }
]